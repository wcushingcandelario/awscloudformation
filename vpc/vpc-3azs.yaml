---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC Template: public and private subnets in three AZs, including NAT gateways in each public subnet with private subnets having egress through the NAT gateway in its AZ. S3 endpoints for all AZs.'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassA
      - ClassB
      - ClassC
    - Label:
        default: 'OneView Configuration'
      Parameters:
      - ProjectName
      - LiveIdentifier

Parameters:
  ClassA:
    Description: 'Class A of VPC (XXX.0.0.0/18)'
    Type: Number
    Default: 10
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClassB:
    Description: 'Class B of VPC (0.XXX.0.0/18)'
    Type: Number
    Default: 11
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClassC:
    Description: 'Class C of VPC (0.0.XXX.0/18)'
    Type: Number
    Default: 11
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ProjectName:
    Description: 'Project or Customer name for billing purposes.'
    Type: String
    ConstraintDescription: 'Must be a string matching the project or customer name for tagging purposes.  This will be attached to all resources in the VPC.'
  CreateInternetGateway:
    Description: 'Boolean indicating whether or not to create an Internet Gateway and the associated components (NAT Gateway, EIPs, etc).  When set to false, a completely private network is built with no internet access.'
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: 'Must be a string matching the project or customer name for tagging purposes.  This will be attached to all resources in the VPC.'
  LiveIdentifier:
    Description: 'Indicator for "nonproduction" or "production" resources.'
    Type: String
    Default: 'nonproduction'
    AllowedValues:
      - development
      - stage
      - nonproduction
      - production
    ConstraintDescription: 'Must be a string matching the available selections to indicate the resources lifecycle state.'
Conditions:
  IsProduction: !Equals [ !Ref LiveIdentifier, production ]
  CreateInternetGatewayBoolean: !Equals [ !Ref CreateInternetGateway, true ]

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '${ClassA}.${ClassB}.${ClassC}.0/18'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-${ClassA}.${ClassB}.${ClassC}.0/18'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Condition: CreateInternetGatewayBoolean
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-${ClassA}.${ClassB}.${ClassC}.0/18'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: CreateInternetGatewayBoolean
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.128.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-A public'
      - Key: Reach
        Value: public
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.129.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-A private'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetAPrivateDB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.130.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-A private DB'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.131.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-B public'
      - Key: Reach
        Value: public
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.132.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-B private'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetBPrivateDB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.133.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-B private DB'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetCPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.134.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-C public'
      - Key: Reach
        Value: public
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetCPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.135.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-C private'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetCPrivateDB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '${ClassA}.${ClassB}.136.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-C private DB'
      - Key: Reach
        Value: private
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Public Route'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  RouteTablePrivateA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private Route A'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  RouteTablePrivateB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private Route B'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  RouteTablePrivateC:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private Route C'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTablePrivateA
  RouteTableAssociationAPrivateDB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateDB
      RouteTableId: !Ref RouteTablePrivateA
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTablePrivateB
  RouteTableAssociationBPrivateDB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateDB
      RouteTableId: !Ref RouteTablePrivateB
  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTablePrivateC
  RouteTableAssociationCPrivateDB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateDB
      RouteTableId: !Ref RouteTablePrivateC
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: CreateInternetGatewayBoolean
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Public'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Private'
      - Key: Project
        Value: !Sub '${ProjectName}'
      - Key: LiveIdentifier
        Value: !Sub '${LiveIdentifier}'
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationAPrivateDB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateDB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationBPrivateDB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateDB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationCPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationCPrivateDB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateDB
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
      - !Ref RouteTablePrivateA
      - !Ref RouteTablePrivateB
      - !Ref RouteTablePrivateC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
  EIPA:
    Type: 'AWS::EC2::EIP'
    Condition: CreateInternetGatewayBoolean
    Properties:
      Domain: vpc
  EIPB:
    Type: 'AWS::EC2::EIP'
    Condition: CreateInternetGatewayBoolean
    Properties:
      Domain: vpc
  EIPC:
    Type: 'AWS::EC2::EIP'
    Condition: CreateInternetGatewayBoolean
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Condition: CreateInternetGatewayBoolean
    Properties:
      AllocationId: !GetAtt 'EIPA.AllocationId'
      SubnetId: !Ref SubnetAPublic
  NatGatewayB:
    Type: 'AWS::EC2::NatGateway'
    Condition: CreateInternetGatewayBoolean
    Properties:
      AllocationId: !GetAtt 'EIPB.AllocationId'
      SubnetId: !Ref SubnetBPublic
  NatGatewayC:
    Type: 'AWS::EC2::NatGateway'
    Condition: CreateInternetGatewayBoolean
    Properties:
      AllocationId: !GetAtt 'EIPC.AllocationId'
      SubnetId: !Ref SubnetCPublic
  RouteA:
    Type: AWS::EC2::Route
    Condition: CreateInternetGatewayBoolean
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA
  RouteB:
    Type: AWS::EC2::Route
    Condition: CreateInternetGatewayBoolean
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayB
  RouteC:
    Type: AWS::EC2::Route
    Condition: CreateInternetGatewayBoolean
    Properties:
      RouteTableId: !Ref RouteTablePrivateC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayC

  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'RDS Subnet group'
      SubnetIds:
      - !Ref SubnetAPrivateDB
      - !Ref SubnetBPrivateDB
      - !Ref SubnetCPrivateDB

Outputs:
  AZs:
    Description: 'AZs'
    Value: 3
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'
  ClassA:
    Description: 'Class A.'
    Value: !Ref ClassA
    Export:
      Name: !Sub '${AWS::StackName}-ClassA'
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  ClassC:
    Description: 'Class C.'
    Value: !Ref ClassC
    Export:
      Name: !Sub '${AWS::StackName}-ClassC'
  ProjectName:
    Description: 'Project Name'
    Value: !Ref ProjectName
    Export:
      Name: !Sub '${AWS::StackName}-ProjectName'
  LiveIdentifier:
    Description: 'Project Live Status Identifier'
    Value: !Ref LiveIdentifier
    Export:
      Name: !Sub '${AWS::StackName}-LiveIdentifier'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'All private subnets.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetAPrivateDB, !Ref SubnetBPrivate, !Ref SubnetBPrivateDB, !Ref SubnetCPrivate, !Ref SubnetCPrivateDB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  SubnetsAppPrivate:
    Description: 'App private subnets.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate, !Ref SubnetCPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsAppPrivate'
  SubnetsDBPrivate:
    Description: 'DB private subnets.'
    Value: !Join [',', [!Ref SubnetAPrivateDB, !Ref SubnetBPrivateDB, !Ref SubnetCPrivateDB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsDBPrivate'
  RouteTablePrivateA:
    Description: 'Route table private A.'
    Value: !Ref RouteTablePrivateA
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateA'
  RouteTablePrivateB:
    Description: 'Route table private B.'
    Value: !Ref RouteTablePrivateB
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateB'
  RouteTablePrivateC:
    Description: 'Route table private C.'
    Value: !Ref RouteTablePrivateC
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateC'
  RouteTablePublic:
    Description: 'Route table public.'
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublic'
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  SubnetAPrivateDB:
    Description: 'Subnet A private DB.'
    Value: !Ref SubnetAPrivateDB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivateDB'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'
  SubnetBPrivateDB:
    Description: 'Subnet B private DB.'
    Value: !Ref SubnetBPrivateDB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivateDB'
  SubnetCPublic:
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPublic'
  SubnetCPrivate:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivate'
  SubnetCPrivateDB:
    Description: 'Subnet C private DB.'
    Value: !Ref SubnetCPrivateDB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivateDB'
  RDSSubnetGroup:
    Description: 'RDS Subnet group'
    Value: !Ref RDSSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-RDSSubnetGroup'
  EIPA:
    Description: 'NAT Gateway Elastic IP A'
    Condition: CreateInternetGatewayBoolean
    Value: !Ref EIPA
    Export:
      Name: !Sub '${AWS::StackName}-NATGatewayEIPA'
  EIPB:
    Description: 'NAT Gateway Elastic IP B'
    Condition: CreateInternetGatewayBoolean
    Value: !Ref EIPB
    Export:
      Name: !Sub '${AWS::StackName}-NATGatewayEIPB'
  EIPC:
    Description: 'NAT Gateway Elastic IP C'
    Condition: CreateInternetGatewayBoolean
    Value: !Ref EIPC
    Export:
      Name: !Sub '${AWS::StackName}-NATGatewayEIPC'
  CreateInternetGateway:
    Description: 'Create Internet Gateway Boolean'
    Value: !Ref CreateInternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-CreateInternetGateway'
